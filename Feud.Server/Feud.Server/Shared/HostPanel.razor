@using Feud.Server.Data
@inject IJSRuntime JSRuntime

<h3>Host</h3>
<div>
	<a href="@QuestionBoard.GuestUrl" target="_blank">@QuestionBoard.GuestUrl</a>
	<button @onclick="CopyGuestUrlToClipboard">Copy Url</button>
</div>
<div>
	@foreach (var answer in QuestionBoard.Answers)
	{
		@if (answer.AnswerAvailable)
		{
			<div>
				<button @onclick="@(e => ToggleAnswer(answer.Number))">@(answer.AnswerVisible ? "Hide" : "Show")</button>
				<div>
					@answer.Text - @answer.Points
				</div>
			</div>
		}
	}
	@for (int i = 0; i < QuestionBoard.Strikes.Count; i++)
	{
		var index = i;

		<div>
			<button @onclick="@(e => ToggleStrike(index))">Strike @(index+1)</button>
		</div>
	}
	<button @onclick="Reset">Reset</button>
</div>

@code {
	[Parameter]
	public QuestionBoard QuestionBoard { get; set; }

	protected void ToggleAnswer(int number)
	{
		var answer = QuestionBoard.Answers.FirstOrDefault(x => x.Number == number);

		if (answer != null)
		{
			answer.AnswerVisible = !answer.AnswerVisible;
		}
	}

	protected void ToggleStrike(int index)
	{
		QuestionBoard.Strikes[index].StrikeVisible = !QuestionBoard.Strikes[index].StrikeVisible;
	}

	protected void Reset()
	{
		foreach (var answer in QuestionBoard.Answers)
		{
			if (answer.AnswerAvailable)
			{
				answer.AnswerVisible = false;
			}
		}

		foreach (var strike in QuestionBoard.Strikes)
		{
			strike.StrikeVisible = false;
		}
	}

	private async Task CopyGuestUrlToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", QuestionBoard.GuestUrl);
	}
}
