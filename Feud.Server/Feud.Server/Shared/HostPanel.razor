@using Feud.Server.Data
@using Feud.Server.Services
@inject IJSRuntime JSRuntime
@inject IFeudHostService FeudHostService

<div class="host-panel">
	<div>
		<span>Guest Url</span>
		<a href="@QuestionBoard.GuestUrl" target="_blank">@QuestionBoard.GuestUrl</a>
		<button @onclick="CopyGuestUrlToClipboard">Copy Url</button>
	</div>
	<div class="vert-gap"></div>
	<div class="answer-list">
		@for (var i = 0; i < QuestionBoard.Answers.Count / 2; i++)
		{
			var index = i;
			var answer = QuestionBoard.Answers[index];

			<div class="answer-pair">
				<HostAnswerListItem BoardId="@QuestionBoard.Id" Answer="QuestionBoard.Answers[index]"></HostAnswerListItem>

				@if (index + 5 < QuestionBoard.Answers.Count)
				{
					<HostAnswerListItem BoardId="@QuestionBoard.Id" Answer="QuestionBoard.Answers[index + 5]"></HostAnswerListItem>
				}
			</div>
		}
	</div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="strike-list-buttons">
		@for (int i = 0; i < QuestionBoard.Strikes.Count; i++)
		{
			var index = i;

			<div class="strike-list-item-button">
				<button class="@(QuestionBoard.Strikes[index].StrikeVisible ? "strike-shown" : "strike-hidden")" @onclick="@(e => ToggleStrike(index))">Strike @(index+1)</button>
			</div>
		}
	</div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="reset-button">
		<button @onclick="Reset">Reset</button>
	</div>
</div>

@code {
	[Parameter]
	public QuestionBoard QuestionBoard { get; set; }

	protected void ToggleStrike(int index)
	{
		FeudHostService.ToggleStrike(QuestionBoard.Id, index);
	}

	protected void Reset()
	{
		FeudHostService.Reset(QuestionBoard.Id);
	}

	private async Task CopyGuestUrlToClipboard()
	{
		await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", QuestionBoard.GuestUrl);
	}
}
