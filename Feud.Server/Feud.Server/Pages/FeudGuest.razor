@page "/feud/guest/{id}"
@using Feud.Server.Data
@using Feud.Server.Services
@inject IFeudHostService FeudHostService
@inject NavigationManager NavigationManager 
@implements IDisposable

@if (Board != null)
{
	<div>
		<Board QuestionBoard="Board"></Board>
	</div>
}


@code {
	[Parameter]
	public string Id { get; set; }

	public QuestionBoard Board { get; set; }

	protected override void OnInitialized()
	{
		try
		{
			Board = FeudHostService.GetBoardForGuest(Id);

			Program.Logger.Log(NLog.LogLevel.Debug, $"FeudGuest.OnInitialized - adding event handlers");

			FeudHostService.AnswerToggled += BoardUpdated;
			FeudHostService.StrikeToggled += BoardUpdated;
			FeudHostService.BoardReset += BoardUpdated;
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	public void Dispose()
	{
		Program.Logger.Log(NLog.LogLevel.Debug, $"FeudGuest.Dispose - removing event handlers");

		FeudHostService.AnswerToggled -= BoardUpdated;
		FeudHostService.StrikeToggled -= BoardUpdated;
		FeudHostService.BoardReset -= BoardUpdated;
	}

	protected void BoardUpdated(object sender, BoardChangedEventArgs e)
	{
		try
		{
			if (e.BoardId == Board.Id)
			{
				Program.Logger.Log(NLog.LogLevel.Debug, $"FeudGuest.{e.Action} - {e.BoardId},{e.ItemChangedNumber}");

				InvokeAsync(StateHasChanged);
			}
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

}
