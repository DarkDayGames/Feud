@page "/feud/guest/{id}"
@using Feud.Server.Data
@using Feud.Server.Services
@inject IFeudHostService FeudHostService
@inject NavigationManager NavigationManager 
@implements IDisposable

@if (_board != null)
{
	<div>
		<Board QuestionBoard="_board"></Board>
	</div>
}


@code {
	[Parameter]
	public string Id { get; set; }

	public QuestionBoard _board { get; set; }

	protected override void OnInitialized()
	{
		try
		{
			_board = FeudHostService.GetBoardForGuest(Id);

			FeudHostService.AnswerToggled += ToggleAnswer;
			FeudHostService.StrikeToggled += ToggleStrike;
			FeudHostService.BoardReset += Reset;
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	public void Dispose()
	{
		FeudHostService.AnswerToggled -= ToggleAnswer;
		FeudHostService.StrikeToggled -= ToggleStrike;
		FeudHostService.BoardReset -= Reset;
	}


	protected void ToggleAnswer(object sender, BoardChangedEventArgs e)
	{
		try
		{
			var answer = _board.Answers.FirstOrDefault(x => x.Number == e.ItemChangedNumber);

			if (answer != null)
			{
				answer.AnswerVisible = !answer.AnswerVisible;

				InvokeAsync(StateHasChanged);
			}
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	protected void ToggleStrike(object sender, BoardChangedEventArgs e)
	{
		try
		{
			_board.Strikes[e.ItemChangedNumber].StrikeVisible = !_board.Strikes[e.ItemChangedNumber].StrikeVisible;

			InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	protected void Reset(object sender, BoardChangedEventArgs e)
	{
		try 
		{ 
			foreach (var answer in _board.Answers)
			{
				if (answer.AnswerAvailable)
				{
					answer.AnswerVisible = false;
				}
			}

			foreach (var strike in _board.Strikes)
			{
				strike.StrikeVisible = false;
			}

			InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

}
