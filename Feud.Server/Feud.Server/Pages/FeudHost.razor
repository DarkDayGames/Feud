@page "/feud/host/{id}"
@using Feud.Server.Data
@using Feud.Server.Services
@inject IFeudHostService FeudHostService
@inject NavigationManager NavigationManager
@implements IDisposable

@if (_board != null)
{
	<h3>Feud Host</h3>
	<div class="hostpage">
		<div class="hostpage-guest">
			<h4>Guest View</h4>
			<Board QuestionBoard="_board"></Board>
		</div>
		<div class="hostpage-host">
			<h4>Host View</h4>
			<HostPanel QuestionBoard="_board"></HostPanel>
		</div>
	</div>
}

@code {
	[Parameter]
	public string Id { get; set; }

	public QuestionBoard _board { get; set; }

	protected override void OnInitialized()
	{
		try
		{
			if (Id == "aabbccddeeff")
			{
				_board = new QuestionBoard
				{
					Id = "aabbccddeeff",
					GuestId = "aabbccddeeff",
					Name = "Tadpooly Feud",
					Question = "Most Colorful Animals",
					Answers = new List<QuestionAnswer>
				{
						new QuestionAnswer {Number = 1, Text = "Apricot Anteaters", Points = 145},
						new QuestionAnswer {Number = 2, Text = "Blue Baboons", Points = 125},
						new QuestionAnswer {Number = 3, Text = "Crimson Crabs", Points = 55},
						new QuestionAnswer {Number = 4, Text = "Daffodil Deer", Points = 28},
						new QuestionAnswer {Number = 5, Text = "Ecrue Emus", Points = 23},
						new QuestionAnswer {Number = 6, Text = "Fuscia Flamingos", Points = 13},
						new QuestionAnswer {Number = 7, Text = "Green Gophers", Points = 1},
						new QuestionAnswer {Number = 8, Text = "Hadish Hornets", Points = 1},
						new QuestionAnswer {Number = 9, Text = "Indigo Iguanas", Points = 1},
						new QuestionAnswer {Number = 10, Text = "Jasmine Juniper Bugs", Points = 1}
					},
					Strikes = new List<StrikeAnswer>
				{
						new StrikeAnswer(),
						new StrikeAnswer(),
						new StrikeAnswer(),
					}
				};

				FeudHostService.AddBoard(_board);
			}
			else
			{
				_board = FeudHostService.GetBoardForHost(Id);
			}

			Program.Logger.Log(NLog.LogLevel.Debug, $"FeudHost.OnInitialized - adding event handlers");

			FeudHostService.AnswerToggled += BoardUpdated;
			FeudHostService.StrikeToggled += BoardUpdated;
			FeudHostService.BoardReset += BoardUpdated;
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	public void Dispose()
	{
		Program.Logger.Log(NLog.LogLevel.Debug, $"FeudHost.Dispose - removing event handlers");

		FeudHostService.AnswerToggled -= BoardUpdated;
		FeudHostService.StrikeToggled -= BoardUpdated;
		FeudHostService.BoardReset -= BoardUpdated;
	}


	protected void BoardUpdated(object sender, BoardChangedEventArgs e)
	{
		try
		{
			if (e.BoardId == _board.Id)
			{
				Program.Logger.Log(NLog.LogLevel.Debug, $"FeudHost.{e.Action} - {e.BoardId},{e.ItemChangedNumber}");

				InvokeAsync(StateHasChanged);
			}
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

}
