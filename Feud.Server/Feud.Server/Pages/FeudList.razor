@page "/feud"
@using System.Diagnostics
@using System.Text.Encodings.Web
@using Feud.Server.Data
@using Feud.Server.Services
@using Feud.Server.ViewModels
@inject NavigationManager NavigationManager
@inject IFeudHostService FeudHostService
@inject IBoardEditingService BoardEditingService
@inject IDateTimeService DateTimeService
@implements IDisposable

@if (_boardToEdit != null && _boards != null)
{
	<div>
		<h3>Current Boards</h3>
		<div class="board-list-header">
			<div>&nbsp;</div>
			<div>Name</div>
			<div>Question</div>
			<div>Answer Count</div>
		</div>
		<div class="board-list">
			@foreach (var board in _boards)
			{
				<div class="board-list-item">
					<div class="board-list-item-actions">
						<NavLink style="color: #0366d6;" @onclick="(e => RunBoard(board.Id))">Run</NavLink>
						<NavLink style="color: #0366d6;" @onclick="(e => EditBoard(board.Id))">Edit</NavLink>
						<NavLink style="color: #0366d6;" @onclick="(e => DeleteBoard(board.Id))">Delete</NavLink>
					</div>
					<div>@board.Name</div>
					<div>@board.Question</div>
					<div>@board.AnswerCount</div>
				</div>
			}
		</div>
	</div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div>
		<EditBoard BoardToEdit="_boardToEdit" CurrentTab="@_currentEditTab"></EditBoard>
	</div>
}

@code {



	public EditBoardViewModel _boardToEdit { get; set; }

	public List<QuestionBoard> _boards { get; set; }

	public string _currentEditTab { get; set; }

	[CascadingParameter] public IModalService Modal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_boardToEdit = new EditBoardViewModel();

			await FeudHostService.LoadBoardsAsync();

			_boards = FeudHostService.GetBoardsForHost();

			Program.Logger.Log(NLog.LogLevel.Debug, $"FeudList.OnInitialized - adding event handlers");

			BoardEditingService.BoardChangesSaving += SaveBoard;
			BoardEditingService.BoardChangesCancelled += ResetBoardAfterEditing;
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}

	}

	public void Dispose()
	{
		Program.Logger.Log(NLog.LogLevel.Debug, $"FeudList.OnInitialized - removing event handlers");

		BoardEditingService.BoardChangesSaving -= SaveBoard;
		BoardEditingService.BoardChangesCancelled -= ResetBoardAfterEditing;
	}

	public void RunBoard(string boardId)
	{
		try
		{
			NavigationManager.NavigateTo($"feud/host/{boardId}");
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	public void EditBoard(string boardId)
	{
		try
		{
			var board = FeudHostService.GetBoardForHost(boardId);

			_boardToEdit = new EditBoardViewModel
			{
				Id = board.Id,
				Name = board.Name,
				Question = board.Question
			};

			for (var i = 0; i < board.Answers.Count; i++)
			{
				_boardToEdit.Answers[i].Text = board.Answers[i].Text;
				_boardToEdit.Answers[i].Points = board.Answers[i].Points;
			}

			_currentEditTab = Shared.EditBoard.TabKeys.Edit;

			InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	public async Task DeleteBoard(string boardId)
	{
		try
		{
			var confirmModal = Modal.Show<ConfirmBoardDeletion>("Delete Board?");
			var result = await confirmModal.Result;

			if (!result.Cancelled)
			{
				FeudHostService.DeleteBoard(boardId);

				await InvokeAsync(StateHasChanged);
			}
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}


	public void SaveBoard(object sender, BoardSavingEventArgs e)
	{
		try
		{
			Program.Logger.Log(NLog.LogLevel.Debug, $"FeudList.SaveBoard");

			if (e.RunBoardAfterSaving)
			{
				NavigationManager.NavigateTo($"feud/host/{e.SavedBoard.Id}");
			}
			else
			{
				ResetBoardAfterEditing(null, null);
			}
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}

	}

	public void ResetBoardAfterEditing(object sender, EventArgs e)
	{
		try
		{
			Program.Logger.Log(NLog.LogLevel.Debug, $"FeudList.ResetBoardAfterEditing");

			_boardToEdit = new EditBoardViewModel();

			_currentEditTab = Shared.EditBoard.TabKeys.Import;

			InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

}