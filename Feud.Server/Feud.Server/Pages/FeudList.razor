@page "/feud"
@using System.Diagnostics
@using Feud.Server.Data
@using Feud.Server.Services
@using Feud.Server.ViewModels
@inject NavigationManager NavigationManager
@inject IFeudHostService FeudHostService
@inject IBoardEditingService BoardEditingService

@if (_boardToEdit != null && _boards != null)
{
	<div>
		<h3>Current Boards</h3>
		<div class="board-list-header">
			<div>&nbsp;</div>
			<div>Name</div>
			<div>Question</div>
			<div>Answer Count</div>
		</div>
		<div class="board-list">
			@foreach (var board in _boards)
			{
				<div class="board-list-item">
					<div class="board-list-item-actions">
						<NavLink href="@($"feud/host/{@board.Id}")">Run</NavLink>
						<NavLink style="color: #0366d6;" @onclick="(e => EditBoard(board.Id))">Edit</NavLink>
					</div>
					<div>@board.Name</div>
					<div>@board.Question</div>
					<div>@board.AnswerCount</div>
				</div>
			}
		</div>
	</div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div class="vert-gap"></div>
	<div>
		<EditBoard BoardToEdit="_boardToEdit" CurrentTab="@_currentEditTab" ></EditBoard>
	</div>
}

@code {



	public EditBoardViewModel _boardToEdit { get; set; }

	public List<QuestionBoard> _boards { get; set; }

	public string _currentEditTab { get; set; }


	protected override void OnInitialized()
	{
		_boardToEdit = new EditBoardViewModel();

		_boards = FeudHostService.GetBoardsForHost();

		BoardEditingService.BoardChangesSaving += SaveBoard;
		BoardEditingService.BoardChangesCancelled += CancelBoardSaving;
	}

	public void Dispose()
	{
		BoardEditingService.BoardChangesSaving -= SaveBoard;
		BoardEditingService.BoardChangesCancelled -= CancelBoardSaving;
	}

	public void EditBoard(string boardId)
	{
		var board = FeudHostService.GetBoardForHost(boardId);

		_boardToEdit = new EditBoardViewModel
		{
			Id = board.Id,
			Name = board.Name,
			Question = board.Question
		};

		for (var i = 0; i < board.Answers.Count; i++)
		{
			_boardToEdit.Answers[i].Text = board.Answers[i].Text;
			_boardToEdit.Answers[i].Points = board.Answers[i].Points;
		}

		_currentEditTab = Shared.EditBoard.TabKeys.Edit;

		InvokeAsync(StateHasChanged);

	}

	public void SaveBoard(object sender, BoardSavingEventArgs e)
	{
		foreach (var answer in e.BoardToSave.Answers)
		{
			if (string.IsNullOrEmpty(answer.Text))
			{
				answer.Points = 0;
			}
		}


		if (string.IsNullOrEmpty(e.BoardToSave.Id))
		{
			var board = new QuestionBoard
			{
				Name = e.BoardToSave.Name,
				Question = e.BoardToSave.Question,
				Answers = e.BoardToSave.Answers
			};

			FeudHostService.AddBoard(board);


			if (e.RunBoardAfterSaving)
			{
				NavigationManager.NavigateTo($"feud/host/{board.Id}");
			}
		}
		else
		{
			var board = FeudHostService.GetBoardForHost(e.BoardToSave.Id);

			board.Name = e.BoardToSave.Name;
			board.Question = e.BoardToSave.Question;
			board.Answers = e.BoardToSave.Answers;
		}

		_boardToEdit = new EditBoardViewModel();

		_currentEditTab = Shared.EditBoard.TabKeys.Import;

		InvokeAsync(StateHasChanged);

	}

	public void CancelBoardSaving(object sender, EventArgs e)
	{
		_boardToEdit = new EditBoardViewModel();

		_currentEditTab = Shared.EditBoard.TabKeys.Import;

		Debug.WriteLine(_currentEditTab);

		InvokeAsync(StateHasChanged);
	}

}