@page "/play/{id}"
@using Feud.Server.Data
@using Feud.Server.Services
@inject NavigationManager NavigationManager
@inject IFeudGameService FeudGameService 
@inject ICurrentPlayerNameService CurrentPlayerNameService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div>
	<h3>Sign In</h3>
</div>
<div>
	<div class="validation-failure-list">
		@if (!string.IsNullOrEmpty(LoginFailureMessage))
		{
			<p>
				@LoginFailureMessage
			</p>
		}
	</div>
	<div class="input-set">
		<div class="input-label">Room Code</div>
		<input class="input-text" @bind="RoomCode" @bind:event="oninput" type="text" maxlength="20" />
	</div>
	<div class="input-set">
		<div class="input-label">Name</div>
		<input class="input-text" @bind="GuestName" @bind:event="oninput" type="text" maxlength="20" />
	</div>
</div>
<div>
	<button @onclick="SignIn" disabled=@NotReadyToPlay>Play</button>
</div>


@code {

	[Parameter]
	public string Id { get; set; }

	public string RoomCode { get; set; }
	public string GuestName { get; set; }
	public string LoginFailureMessage { get; set; }

	public bool NotReadyToPlay => string.IsNullOrEmpty(RoomCode) || string.IsNullOrEmpty(GuestName);

	protected override void OnInitialized()
	{
		try
		{
			RoomCode = Id;
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			CurrentPlayerNameService.Name = await LocalStorage.GetItemAsync<string>(StorageKey.PlayerName);

			GuestName = CurrentPlayerNameService.Name;

			if (!string.IsNullOrEmpty(GuestName))
			{
				await InvokeAsync(StateHasChanged);
			}
		}
	}

	protected async Task SignIn()
	{
		try
		{
			if (!string.IsNullOrWhiteSpace(RoomCode)
				&& !string.IsNullOrEmpty(GuestName))
			{
				var result = FeudGameService.LoginPlayer(RoomCode, GuestName);

				if (string.IsNullOrEmpty(result))
				{
					CurrentPlayerNameService.Name = GuestName;
					await LocalStorage.SetItemAsync(StorageKey.PlayerName, GuestName);

					var test = await LocalStorage.GetItemAsync<string>(StorageKey.PlayerName);

					NavigationManager.NavigateTo(string.Format(PageRoutes.PlayFeud, RoomCode));
				}
				else
				{
					LoginFailureMessage = result;
				}
			}
		}
		catch (Exception ex)
		{
			Program.Logger.Log(NLog.LogLevel.Error, ex);
			NavigationManager.NavigateTo("error");
		}
	}
}
